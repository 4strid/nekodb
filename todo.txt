* Support projections: whoops!
* Constants (not just strings)
* NeDB autocompaction

* rewrite cursor.forEach
* support the browser
* More relationships: backreferences etc.
* Support Option of References (not possible in current implementation)
* Two way data flow for embedded models
- More database methods
  - insertOne
  - insertMany
  - findOneAndUpdate
  - findOneAndDelete
  - findOneAndReplace
- use MongoDB's native validation
- Disallow mixing References and basic typeclasses
- Custom error messages
- namespacing
- Wildcard Typeclass
- Support model.update (with type checking)
  - could do this without implementing a full update query processor by implementing rollbacks
  - orrrrr just use Mongo's native validation

CODE HEALTH:
- use async/await
- consistently use trailing commas
- add more tests
- type checking when registering models and validators (a program that throws errors is easier to debug than one that just crashes because you fed it bad input)
- jsdoc comments
* write README
- Typeclass validators should return promises (... this would basically require a complete rewrite)
  - Actually given how slow Promises are, should probably support a hybrid system
- Bluebird promises are apparently much faster than native ones
- rewrite the whole thing now that we have a better understanding of how the pieces fit together
  - importantly: More elegantly deal with references (all in one place and not just sporadically where needed)
- modularity is great, but it's possible we've broken up the code into too many files

EVENTUALLY:
- migrations
- realtime
- transactions
