FEATURES:
* model.join([[fields]]) -- resolves all references to their actual documents
* findOne({...}).join()
* supply a filepath to specify where to stick the db files for nedb
  - related to namespacing
  - this will solve the problem of test files potentially intersecting with other test files
* Actually support MongoDB
  - use MongoDB's native validation
- Add remaining database methods
  - indexes
- More relationships: backreferences etc.
* Hooks
- Custom error messages
- namespacing
- Support model.update (with type checking)
  - could do this without implementing a full update query processor by implementing rollbacks

CODE HEALTH:
- there's no compelling reason for modelReference methods to be getters instead of just regular functions
- consistently use arrow functions / ES6 features
- consistently use trailing commas
- add more tests
- type checking when registering models and validators
- use prototype instead of defineProperty to attach __model to instance
- jsdoc comments
* write README
- Typeclass validators should return promises (... this would basically require a complete rewrite)
  - Actually given how slow Promises are, should probably support a hybrid system
- Bluebird promises are apparently much faster than native ones
- More sane dependency chains
- rewrite the whole thing now that we have a better understanding of how the pieces fit together
- modularity is great, but it's possible we've broken up the code into too many files

EVENTUALLY:
- migrations
- realtime
- transactions