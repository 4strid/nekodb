FEATURES:
* supply a filepath to specify where to stick the db files for nedb
  - related to namespacing
  - this will solve the problem of test files potentially intersecting with other test files' collections
* Actually support MongoDB
  - Support "magic" async (no waiting for connect to finish)
* Hooks (still have to do delete)
* Indexes
* Only allow Array of references (throw errors if too complex) 

----------------- release 1.0 -----------------
- More database methods
  - findOneAndUpdate
  - findOneAndDelete
  - findOneAndReplace
- use MongoDB's native validation
- refactor tests to be more modular (so we can recycle tests between MongoDB and NeDB)
- Have NeDBClient return results similar to MongoDB's WriteResults (the more consistency between the two clients, the better)
- More relationships: backreferences etc.
- Support Option of References (not possible in current implementation)
- Disallow mixing References and basic typeclasses
- Custom error messages
- namespacing
- Wildcard Typeclass
- Support model.update (with type checking)
  - could do this without implementing a full update query processor by implementing rollbacks
  - orrrrr just use Mongo's native validation

CODE HEALTH:
- consistently use arrow functions
- use async/await
- consistently use trailing commas
- add more tests
- type checking when registering models and validators (a program that throws errors is easier to debug than one that just crashes because you fed it bad input)
- jsdoc comments
* write README
- Typeclass validators should return promises (... this would basically require a complete rewrite)
  - Actually given how slow Promises are, should probably support a hybrid system
- Bluebird promises are apparently much faster than native ones
- consistently use 'new' constructors for internal classes and Object.create constructors for public facing classes (it's just sort of random right now)
- rewrite the whole thing now that we have a better understanding of how the pieces fit together
  - importantly: More elegantly deal with references (all in one place and not just sporadically where needed)
- modularity is great, but it's possible we've broken up the code into too many files

EVENTUALLY:
- migrations
- realtime
- transactions
